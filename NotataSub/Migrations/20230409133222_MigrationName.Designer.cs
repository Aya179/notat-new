// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotataSub.Models;

namespace NotataSub.Migrations
{
    [DbContext(typeof(StudyHubContext))]
    [Migration("20230409133222_MigrationName")]
    partial class MigrationName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NotataSub.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatId")
                        .HasColumnType("int")
                        .HasColumnName("cat_id");

                    b.Property<byte[]>("Image")
                        .HasColumnType("Image");

                    b.Property<string>("IsDeleted")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("isDeleted")
                        .IsFixedLength(true);

                    b.Property<string>("Linkurl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("linkurl");

                    b.Property<string>("OtherWriter")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("OtherWriter");

                    b.Property<int?>("Pages")
                        .HasColumnType("int")
                        .HasColumnName("pages");

                    b.Property<int?>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<string>("WriterName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("WriterName");

                    b.Property<DateTime?>("Year")
                        .HasColumnType("date")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("CatId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("NotataSub.Models.BookSemeter", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bookTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("bookId");

                    b.Property<int>("pagenum")
                        .HasColumnType("int")
                        .HasColumnName("pagenum");

                    b.Property<int>("semeternum")
                        .HasColumnType("int")
                        .HasColumnName("semeternum");

                    b.HasKey("id");

                    b.ToTable("BookSemeter");
                });

            modelBuilder.Entity("NotataSub.Models.Buying", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BuyingDate")
                        .HasColumnType("date")
                        .HasColumnName("BuyingDate");

                    b.Property<int>("bookID")
                        .HasColumnType("int")
                        .HasColumnName("bookID");

                    b.Property<int>("clientId")
                        .HasColumnType("int")
                        .HasColumnName("clientId");

                    b.HasKey("Id");

                    b.ToTable("Buying");
                });

            modelBuilder.Entity("NotataSub.Models.Catogary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Catogary");
                });

            modelBuilder.Entity("NotataSub.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("image")
                        .HasColumnName("image");

                    b.Property<bool?>("IsBuing")
                        .HasColumnType("bit")
                        .HasColumnName("IsBuing");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("balance")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("balance");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("NotataSub.Models.ClientCobon", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("CobonDate")
                        .HasColumnType("date")
                        .HasColumnName("CobonDate");

                    b.Property<int>("CobonId")
                        .HasColumnType("int")
                        .HasColumnName("CobonId");

                    b.HasKey("id");

                    b.ToTable("ClientCobon");
                });

            modelBuilder.Entity("NotataSub.Models.Cobon", b =>
                {
                    b.Property<int>("CobonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cobonId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CobonNumber")
                        .HasMaxLength(40)
                        .HasColumnType("nchar(40)")
                        .HasColumnName("cobonNumber")
                        .IsFixedLength(true);

                    b.Property<decimal>("CobonValue")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("cobonValue");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit")
                        .HasColumnName("isValid");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("releaseDate");

                    b.HasKey("CobonId");

                    b.ToTable("Cobon");
                });

            modelBuilder.Entity("NotataSub.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("courseId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("courseName");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentId");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int")
                        .HasColumnName("facultyId");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<int>("Semester")
                        .HasColumnType("int")
                        .HasColumnName("semester");

                    b.Property<string>("Teacher")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("teacher");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("CourseId");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_Course_departmentId");

                    b.HasIndex(new[] { "FacultyId" }, "IX_Course_facultyId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("NotataSub.Models.CourseAttachement", b =>
                {
                    b.Property<int>("AttachementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("attachementId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nchar(200)")
                        .HasColumnName("attachUrl")
                        .IsFixedLength(true);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("date")
                        .HasColumnName("publishDate");

                    b.HasKey("AttachementId")
                        .HasName("PK__CourseAt__7CA72DFB90A4D1EC");

                    b.HasIndex(new[] { "CourseId" }, "IX_CourseAttachement_courseId");

                    b.ToTable("CourseAttachement");
                });

            modelBuilder.Entity("NotataSub.Models.CourseExam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("examId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("date")
                        .HasColumnName("examDate");

                    b.Property<int?>("Failed")
                        .HasColumnType("int")
                        .HasColumnName("failed");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Passes")
                        .HasColumnType("int")
                        .HasColumnName("passes");

                    b.HasKey("ExamId")
                        .HasName("PK__CourseEx__A56D125FB33AED43");

                    b.HasIndex(new[] { "CourseId" }, "IX_CourseExam_courseId");

                    b.ToTable("CourseExam");
                });

            modelBuilder.Entity("NotataSub.Models.CourseHashtag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<int?>("HashtagId")
                        .HasColumnType("int")
                        .HasColumnName("hashtagId");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CourseId" }, "IX_CourseHashtag_courseId");

                    b.HasIndex(new[] { "HashtagId" }, "IX_CourseHashtag_hashtagId");

                    b.ToTable("CourseHashtag");
                });

            modelBuilder.Entity("NotataSub.Models.CourseOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OfferId" }, "IX_CourseOffers_OfferId");

                    b.HasIndex(new[] { "CourseId" }, "IX_CourseOffers_courseId");

                    b.ToTable("CourseOffers");
                });

            modelBuilder.Entity("NotataSub.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("departmentId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("departmentName");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int")
                        .HasColumnName("facultyId");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int")
                        .HasColumnName("universityId");

                    b.HasKey("DepartmentId");

                    b.HasIndex(new[] { "FacultyId" }, "IX_Department_facultyId");

                    b.HasIndex(new[] { "UniversityId" }, "IX_Department_universityId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("NotataSub.Models.ExamQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("questionId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ans1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ans1");

                    b.Property<string>("Ans2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ans2");

                    b.Property<string>("Ans3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ans3");

                    b.Property<string>("Ans4")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ans4");

                    b.Property<string>("Ans5")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ans5");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("examId");

                    b.Property<string>("Question")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("question");

                    b.Property<int?>("RightAnswer")
                        .HasColumnType("int")
                        .HasColumnName("rightAnswer");

                    b.HasKey("QuestionId")
                        .HasName("PK__ExamQues__6238D4B29DCC452F");

                    b.HasIndex(new[] { "ExamId" }, "IX_ExamQuestion_examId");

                    b.ToTable("ExamQuestion");
                });

            modelBuilder.Entity("NotataSub.Models.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("facultyId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("UniersityId")
                        .HasColumnType("int")
                        .HasColumnName("uniersityId");

                    b.HasKey("FacultyId");

                    b.HasIndex(new[] { "UniersityId" }, "IX_Faculty_uniersityId");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("NotataSub.Models.Hashtag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HashtagText")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("hashtagText");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.HasKey("Id");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("NotataSub.Models.Lecture", b =>
                {
                    b.Property<int>("LectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("lectureId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("LectureNum")
                        .HasColumnType("int")
                        .HasColumnName("lectureNum");

                    b.Property<string>("Linkurl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("linkurl");

                    b.Property<int>("Pages")
                        .HasColumnType("int")
                        .HasColumnName("pages");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("date")
                        .HasColumnName("publishDate");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<int>("Yearid")
                        .HasColumnType("int")
                        .HasColumnName("yearid");

                    b.HasKey("LectureId");

                    b.HasIndex(new[] { "CourseId" }, "IX_Lecture_courseId");

                    b.HasIndex(new[] { "Yearid" }, "IX_Lecture_yearid");

                    b.ToTable("Lecture");
                });

            modelBuilder.Entity("NotataSub.Models.Library", b =>
                {
                    b.Property<int>("LibId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("libId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("notes");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("phone")
                        .IsFixedLength(true);

                    b.HasKey("LibId")
                        .HasName("PK__Library__13D57668A432853F");

                    b.ToTable("Library");
                });

            modelBuilder.Entity("NotataSub.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("newsId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int")
                        .HasColumnName("facultyId");

                    b.Property<string>("NewsText")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("newsText");

                    b.Property<string>("NewsUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nchar(400)")
                        .HasColumnName("newsUrl")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("date")
                        .HasColumnName("publishDate");

                    b.HasKey("NewsId");

                    b.HasIndex(new[] { "FacultyId" }, "IX_News_facultyId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("NotataSub.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<string>("Discription")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("discription")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("Enddate")
                        .HasColumnType("date")
                        .HasColumnName("enddate");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("OfferText")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("offerText");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.HasKey("Id");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("NotataSub.Models.OnLineCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("cost");

                    b.Property<string>("CourseName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("courseName");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("description");

                    b.Property<string>("Domain")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsUniversity")
                        .HasColumnType("bit")
                        .HasColumnName("isUniversity");

                    b.Property<int?>("NumOfLectures")
                        .HasColumnType("int")
                        .HasColumnName("numOfLectures");

                    b.Property<string>("PromoLink")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("promoLink");

                    b.Property<string>("Teacher")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("teacher");

                    b.HasKey("Id");

                    b.ToTable("OnLineCourse");
                });

            modelBuilder.Entity("NotataSub.Models.OnlineCobon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsPayes")
                        .HasColumnType("bit")
                        .HasColumnName("isPayes");

                    b.Property<int?>("LibId")
                        .HasColumnType("int")
                        .HasColumnName("libId");

                    b.Property<int?>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("date")
                        .HasColumnName("publishDate");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("OnlineCobon");
                });

            modelBuilder.Entity("NotataSub.Models.OnlineExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<int?>("Failed")
                        .HasColumnType("int")
                        .HasColumnName("failed");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("NumOfQuestions")
                        .HasColumnType("int")
                        .HasColumnName("numOfQuestions");

                    b.Property<int?>("Passed")
                        .HasColumnType("int")
                        .HasColumnName("passed");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CourseId" }, "IX_OnlineExam_courseId");

                    b.ToTable("OnlineExam");
                });

            modelBuilder.Entity("NotataSub.Models.OnlineLecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("description");

                    b.Property<string>("Files")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("files");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("LectureNum")
                        .HasColumnType("int")
                        .HasColumnName("lectureNum");

                    b.Property<DateTime?>("Publishdate")
                        .HasColumnType("date")
                        .HasColumnName("publishdate");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CourseId" }, "IX_OnlineLecture_courseId");

                    b.ToTable("OnlineLecture");
                });

            modelBuilder.Entity("NotataSub.Models.OnlineQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ans1")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ans1");

                    b.Property<string>("Ans2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ans2");

                    b.Property<string>("Ans3")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ans3");

                    b.Property<string>("Ans4")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ans4");

                    b.Property<string>("Ans5")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ans5");

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("answer");

                    b.Property<string>("QuestionText")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("questionText");

                    b.HasKey("Id");

                    b.ToTable("OnlineQuestion");
                });

            modelBuilder.Entity("NotataSub.Models.RegisterOnLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<int?>("CurrentLesson")
                        .HasColumnType("int")
                        .HasColumnName("currentLesson");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsDone")
                        .HasColumnType("bit")
                        .HasColumnName("isDone");

                    b.Property<bool?>("IsPassed")
                        .HasColumnType("bit")
                        .HasColumnName("isPassed");

                    b.Property<DateTime?>("Registerdate")
                        .HasColumnType("date")
                        .HasColumnName("registerdate");

                    b.Property<int?>("Reviews")
                        .HasColumnType("int")
                        .HasColumnName("reviews");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("studentId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CourseId" }, "IX_RegisterOnLine_courseId");

                    b.HasIndex(new[] { "StudentId" }, "IX_RegisterOnLine_studentId");

                    b.ToTable("RegisterOnLine");
                });

            modelBuilder.Entity("NotataSub.Models.RegisterationType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("typeId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,0)")
                        .HasColumnName("price");

                    b.HasKey("TypeId")
                        .HasName("PK__Register__F04DF13A11ED9B73");

                    b.ToTable("RegisterationType");
                });

            modelBuilder.Entity("NotataSub.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("studentId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activationcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("activationcode");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentId");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nchar(200)")
                        .HasColumnName("email")
                        .IsFixedLength(true);

                    b.Property<int>("FaculityId")
                        .HasColumnType("int")
                        .HasColumnName("faculityId");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("phone")
                        .IsFixedLength(true);

                    b.Property<int>("Yearid")
                        .HasColumnType("int")
                        .HasColumnName("yearid");

                    b.HasKey("StudentId");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_Student_departmentId");

                    b.HasIndex(new[] { "FaculityId" }, "IX_Student_faculityId");

                    b.HasIndex(new[] { "Yearid" }, "IX_Student_yearid");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("NotataSub.Models.StudentCourse", b =>
                {
                    b.Property<int>("ScId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("scId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("studentId");

                    b.HasKey("ScId")
                        .HasName("PK__StudentC__3215821D6D532D9D");

                    b.HasIndex(new[] { "CourseId" }, "IX_StudentCourse_courseId");

                    b.HasIndex(new[] { "StudentId" }, "IX_StudentCourse_studentId");

                    b.ToTable("StudentCourse");
                });

            modelBuilder.Entity("NotataSub.Models.StudentExamOnLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("date")
                        .HasColumnName("examDate");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("examId");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Mark")
                        .HasColumnType("int")
                        .HasColumnName("mark");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("studentId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ExamId" }, "IX_StudentExamOnLine_examId");

                    b.HasIndex(new[] { "StudentId" }, "IX_StudentExamOnLine_studentId");

                    b.ToTable("StudentExamOnLine");
                });

            modelBuilder.Entity("NotataSub.Models.StudentLecture", b =>
                {
                    b.Property<int>("SlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("slId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DownloadDate")
                        .HasColumnType("date")
                        .HasColumnName("downloadDate");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsFav")
                        .HasColumnType("bit")
                        .HasColumnName("isFav");

                    b.Property<int?>("LectureId")
                        .HasColumnType("int")
                        .HasColumnName("lectureId");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("studentId");

                    b.Property<DateTime?>("ViewDate")
                        .HasColumnType("date")
                        .HasColumnName("viewDate");

                    b.HasKey("SlId")
                        .HasName("PK__StudentL__32DCE1E7526EF8FF");

                    b.HasIndex(new[] { "LectureId" }, "IX_StudentLecture_lectureId");

                    b.HasIndex(new[] { "StudentId" }, "IX_StudentLecture_studentId");

                    b.ToTable("StudentLecture");
                });

            modelBuilder.Entity("NotataSub.Models.StudentNote", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("noteId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("LectureId")
                        .HasColumnType("int")
                        .HasColumnName("lectureId");

                    b.Property<string>("NoteText")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("noteText");

                    b.Property<int?>("Page")
                        .HasColumnType("int")
                        .HasColumnName("page");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("studentId");

                    b.HasKey("NoteId")
                        .HasName("PK__StudentN__03C97EFDB06B1A33");

                    b.HasIndex(new[] { "LectureId" }, "IX_StudentNotes_lectureId");

                    b.HasIndex(new[] { "StudentId" }, "IX_StudentNotes_studentId");

                    b.ToTable("StudentNotes");
                });

            modelBuilder.Entity("NotataSub.Models.StudentPresense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("LectureId")
                        .HasColumnType("int")
                        .HasColumnName("lectureId");

                    b.Property<DateTime?>("PresenseDate")
                        .HasColumnType("date")
                        .HasColumnName("presenseDate");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("studentId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LectureId" }, "IX_StudentPresense_lectureId");

                    b.HasIndex(new[] { "StudentId" }, "IX_StudentPresense_studentId");

                    b.ToTable("StudentPresense");
                });

            modelBuilder.Entity("NotataSub.Models.StudentRegister", b =>
                {
                    b.Property<int>("SrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("srId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CobonId")
                        .HasColumnType("int")
                        .HasColumnName("cobonId");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit")
                        .HasColumnName("isPaid");

                    b.Property<bool?>("IsValid")
                        .HasColumnType("bit")
                        .HasColumnName("isValid");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("registerDate");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("studentId");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("typeId");

                    b.HasKey("SrId")
                        .HasName("PK__StudentR__36B01FFD2A9D488D");

                    b.HasIndex(new[] { "CobonId" }, "IX_StudentRegister_cobonId");

                    b.HasIndex(new[] { "StudentId" }, "IX_StudentRegister_studentId");

                    b.HasIndex(new[] { "TypeId" }, "IX_StudentRegister_typeId");

                    b.ToTable("StudentRegister");
                });

            modelBuilder.Entity("NotataSub.Models.StudentRegisterOnline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CobonId")
                        .HasColumnType("int")
                        .HasColumnName("cobonId");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Review")
                        .HasColumnType("int")
                        .HasColumnName("review");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CourseId" }, "IX_StudentRegisterOnline_CourseId");

                    b.HasIndex(new[] { "StudentId" }, "IX_StudentRegisterOnline_StudentId");

                    b.HasIndex(new[] { "CobonId" }, "IX_StudentRegisterOnline_cobonId");

                    b.ToTable("StudentRegisterOnline");
                });

            modelBuilder.Entity("NotataSub.Models.Studyyear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Deptid")
                        .HasColumnType("int")
                        .HasColumnName("deptid");

                    b.Property<string>("Yearname")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("yearname")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Deptid" }, "IX_studyyear_deptid");

                    b.ToTable("studyyear");
                });

            modelBuilder.Entity("NotataSub.Models.SubCatogary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CatogaryId")
                        .HasColumnType("int")
                        .HasColumnName("Catogary_id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CatogaryId");

                    b.ToTable("Sub_catogary");
                });

            modelBuilder.Entity("NotataSub.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("teacherId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nchar(500)")
                        .HasColumnName("description")
                        .IsFixedLength(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Photo")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("photo");

                    b.HasKey("TeacherId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("NotataSub.Models.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("universityId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UniversityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("universityName");

                    b.HasKey("UniversityId");

                    b.ToTable("University");
                });

            modelBuilder.Entity("NotataSub.Models.Writer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image")
                        .HasColumnType("image")
                        .HasColumnName("image");

                    b.Property<string>("Information")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("information");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Writer");
                });

            modelBuilder.Entity("NotataSub.Models.Book", b =>
                {
                    b.HasOne("NotataSub.Models.Catogary", "Cat")
                        .WithMany("Books")
                        .HasForeignKey("CatId")
                        .HasConstraintName("FK_Books_Catogary")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cat");
                });

            modelBuilder.Entity("NotataSub.Models.Course", b =>
                {
                    b.HasOne("NotataSub.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Course_Department")
                        .IsRequired();

                    b.HasOne("NotataSub.Models.Faculty", "Faculty")
                        .WithMany("Courses")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK_Course_Faculty")
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("NotataSub.Models.CourseAttachement", b =>
                {
                    b.HasOne("NotataSub.Models.Course", "Course")
                        .WithMany("CourseAttachements")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CourseAttachement_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("NotataSub.Models.CourseExam", b =>
                {
                    b.HasOne("NotataSub.Models.Course", "Course")
                        .WithMany("CourseExams")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CourseExam_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("NotataSub.Models.CourseHashtag", b =>
                {
                    b.HasOne("NotataSub.Models.OnLineCourse", "Course")
                        .WithMany("CourseHashtags")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CourseHashtag_OnLineCourse");

                    b.HasOne("NotataSub.Models.Hashtag", "Hashtag")
                        .WithMany("CourseHashtags")
                        .HasForeignKey("HashtagId")
                        .HasConstraintName("FK_CourseHashtag_Hashtags");

                    b.Navigation("Course");

                    b.Navigation("Hashtag");
                });

            modelBuilder.Entity("NotataSub.Models.CourseOffer", b =>
                {
                    b.HasOne("NotataSub.Models.OnLineCourse", "Course")
                        .WithMany("CourseOffers")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CourseOffers_OnLineCourse");

                    b.HasOne("NotataSub.Models.Offer", "Offer")
                        .WithMany("CourseOffers")
                        .HasForeignKey("OfferId")
                        .HasConstraintName("FK_CourseOffers_Offers");

                    b.Navigation("Course");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("NotataSub.Models.Department", b =>
                {
                    b.HasOne("NotataSub.Models.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK_Department_Faculty")
                        .IsRequired();

                    b.HasOne("NotataSub.Models.University", "University")
                        .WithMany("Departments")
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("FK_Department_University")
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("University");
                });

            modelBuilder.Entity("NotataSub.Models.ExamQuestion", b =>
                {
                    b.HasOne("NotataSub.Models.CourseExam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_ExamQuestion_CourseExam");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("NotataSub.Models.Faculty", b =>
                {
                    b.HasOne("NotataSub.Models.University", "Uniersity")
                        .WithMany("Faculties")
                        .HasForeignKey("UniersityId")
                        .HasConstraintName("FK_Faculty_University")
                        .IsRequired();

                    b.Navigation("Uniersity");
                });

            modelBuilder.Entity("NotataSub.Models.Lecture", b =>
                {
                    b.HasOne("NotataSub.Models.Course", "Course")
                        .WithMany("Lectures")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Lecture_Course")
                        .IsRequired();

                    b.HasOne("NotataSub.Models.Studyyear", "Year")
                        .WithMany("Lectures")
                        .HasForeignKey("Yearid")
                        .HasConstraintName("FK_Lecture_studyyear")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("NotataSub.Models.News", b =>
                {
                    b.HasOne("NotataSub.Models.Faculty", "Faculty")
                        .WithMany("News")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK_News_Faculty");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("NotataSub.Models.OnlineExam", b =>
                {
                    b.HasOne("NotataSub.Models.OnLineCourse", "Course")
                        .WithMany("OnlineExams")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_OnlineExam_OnLineCourse");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("NotataSub.Models.OnlineLecture", b =>
                {
                    b.HasOne("NotataSub.Models.OnLineCourse", "Course")
                        .WithMany("OnlineLectures")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_OnlineLecture_OnLineCourse");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("NotataSub.Models.RegisterOnLine", b =>
                {
                    b.HasOne("NotataSub.Models.OnLineCourse", "Course")
                        .WithMany("RegisterOnLines")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_RegisterOnLine_OnLineCourse")
                        .IsRequired();

                    b.HasOne("NotataSub.Models.Student", "Student")
                        .WithMany("RegisterOnLines")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_RegisterOnLine_Student")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("NotataSub.Models.Student", b =>
                {
                    b.HasOne("NotataSub.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Student_Department")
                        .IsRequired();

                    b.HasOne("NotataSub.Models.Faculty", "Faculity")
                        .WithMany("Students")
                        .HasForeignKey("FaculityId")
                        .HasConstraintName("FK_Student_Faculty")
                        .IsRequired();

                    b.HasOne("NotataSub.Models.Studyyear", "Year")
                        .WithMany("Students")
                        .HasForeignKey("Yearid")
                        .HasConstraintName("FK_Student_studyyear")
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Faculity");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("NotataSub.Models.StudentCourse", b =>
                {
                    b.HasOne("NotataSub.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_StudentCourse_Course");

                    b.HasOne("NotataSub.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentCourse_Student");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("NotataSub.Models.StudentExamOnLine", b =>
                {
                    b.HasOne("NotataSub.Models.OnlineExam", "Exam")
                        .WithMany("StudentExamOnLines")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_StudentExamOnLine_OnlineExam");

                    b.HasOne("NotataSub.Models.Student", "Student")
                        .WithMany("StudentExamOnLines")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentExamOnLine_Student");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("NotataSub.Models.StudentLecture", b =>
                {
                    b.HasOne("NotataSub.Models.Lecture", "Lecture")
                        .WithMany("StudentLectures")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_StudentLecture_Lecture");

                    b.HasOne("NotataSub.Models.Student", "Student")
                        .WithMany("StudentLectures")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentLecture_Student");

                    b.Navigation("Lecture");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("NotataSub.Models.StudentNote", b =>
                {
                    b.HasOne("NotataSub.Models.Lecture", "Lecture")
                        .WithMany("StudentNotes")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_StudentNotes_Lecture");

                    b.HasOne("NotataSub.Models.Student", "Student")
                        .WithMany("StudentNotes")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentNotes_Student");

                    b.Navigation("Lecture");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("NotataSub.Models.StudentPresense", b =>
                {
                    b.HasOne("NotataSub.Models.OnlineLecture", "Lecture")
                        .WithMany("StudentPresenses")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_StudentPresense_OnlineLecture");

                    b.HasOne("NotataSub.Models.Student", "Student")
                        .WithMany("StudentPresenses")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentPresense_Student");

                    b.Navigation("Lecture");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("NotataSub.Models.StudentRegister", b =>
                {
                    b.HasOne("NotataSub.Models.Cobon", "Cobon")
                        .WithMany("StudentRegisters")
                        .HasForeignKey("CobonId")
                        .HasConstraintName("FK_StudentRegister_Cobon");

                    b.HasOne("NotataSub.Models.Student", "Student")
                        .WithMany("StudentRegisters")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentRegister_Student");

                    b.HasOne("NotataSub.Models.RegisterationType", "Type")
                        .WithMany("StudentRegisters")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_StudentRegister_RegisterationType");

                    b.Navigation("Cobon");

                    b.Navigation("Student");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("NotataSub.Models.StudentRegisterOnline", b =>
                {
                    b.HasOne("NotataSub.Models.OnlineCobon", "Cobon")
                        .WithMany("StudentRegisterOnlines")
                        .HasForeignKey("CobonId")
                        .HasConstraintName("FK_StudentRegisterOnline_OnlineCobon");

                    b.HasOne("NotataSub.Models.OnLineCourse", "Course")
                        .WithMany("StudentRegisterOnlines")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_StudentRegisterOnline_OnLineCourse");

                    b.HasOne("NotataSub.Models.Student", "Student")
                        .WithMany("StudentRegisterOnlines")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentRegisterOnline_Student");

                    b.Navigation("Cobon");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("NotataSub.Models.Studyyear", b =>
                {
                    b.HasOne("NotataSub.Models.Department", "Dept")
                        .WithMany("Studyyears")
                        .HasForeignKey("Deptid")
                        .HasConstraintName("FK_studyyear_Department");

                    b.Navigation("Dept");
                });

            modelBuilder.Entity("NotataSub.Models.SubCatogary", b =>
                {
                    b.HasOne("NotataSub.Models.Catogary", "Catogary")
                        .WithMany("SubCatogaries")
                        .HasForeignKey("CatogaryId")
                        .HasConstraintName("FK_Sub_catogary_Catogary");

                    b.Navigation("Catogary");
                });

            modelBuilder.Entity("NotataSub.Models.Catogary", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("SubCatogaries");
                });

            modelBuilder.Entity("NotataSub.Models.Cobon", b =>
                {
                    b.Navigation("StudentRegisters");
                });

            modelBuilder.Entity("NotataSub.Models.Course", b =>
                {
                    b.Navigation("CourseAttachements");

                    b.Navigation("CourseExams");

                    b.Navigation("Lectures");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("NotataSub.Models.CourseExam", b =>
                {
                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("NotataSub.Models.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");

                    b.Navigation("Studyyears");
                });

            modelBuilder.Entity("NotataSub.Models.Faculty", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Departments");

                    b.Navigation("News");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("NotataSub.Models.Hashtag", b =>
                {
                    b.Navigation("CourseHashtags");
                });

            modelBuilder.Entity("NotataSub.Models.Lecture", b =>
                {
                    b.Navigation("StudentLectures");

                    b.Navigation("StudentNotes");
                });

            modelBuilder.Entity("NotataSub.Models.Offer", b =>
                {
                    b.Navigation("CourseOffers");
                });

            modelBuilder.Entity("NotataSub.Models.OnLineCourse", b =>
                {
                    b.Navigation("CourseHashtags");

                    b.Navigation("CourseOffers");

                    b.Navigation("OnlineExams");

                    b.Navigation("OnlineLectures");

                    b.Navigation("RegisterOnLines");

                    b.Navigation("StudentRegisterOnlines");
                });

            modelBuilder.Entity("NotataSub.Models.OnlineCobon", b =>
                {
                    b.Navigation("StudentRegisterOnlines");
                });

            modelBuilder.Entity("NotataSub.Models.OnlineExam", b =>
                {
                    b.Navigation("StudentExamOnLines");
                });

            modelBuilder.Entity("NotataSub.Models.OnlineLecture", b =>
                {
                    b.Navigation("StudentPresenses");
                });

            modelBuilder.Entity("NotataSub.Models.RegisterationType", b =>
                {
                    b.Navigation("StudentRegisters");
                });

            modelBuilder.Entity("NotataSub.Models.Student", b =>
                {
                    b.Navigation("RegisterOnLines");

                    b.Navigation("StudentCourses");

                    b.Navigation("StudentExamOnLines");

                    b.Navigation("StudentLectures");

                    b.Navigation("StudentNotes");

                    b.Navigation("StudentPresenses");

                    b.Navigation("StudentRegisterOnlines");

                    b.Navigation("StudentRegisters");
                });

            modelBuilder.Entity("NotataSub.Models.Studyyear", b =>
                {
                    b.Navigation("Lectures");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("NotataSub.Models.University", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Faculties");
                });
#pragma warning restore 612, 618
        }
    }
}
